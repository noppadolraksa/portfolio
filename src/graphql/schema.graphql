### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Education {
  date: String
  degree: String!
  fieldOfStudy: String!
  id: String!
  index: Int!
  institution: String!
  user: User!
  userId: String!
}

input EducationOrderByRelationAggregateInput {
  _count: SortOrder
}

type Project {
  description: String!
  id: String!
  index: Int!
  link1: String
  link2: String
  link3: String
  sourceCode: String
  techniques: [String!]!
  technologies: [String!]!
  title: String!
  user: User!
  userId: String!
}

input ProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

type Query {
  user: [User]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [QueryUsersOrderByInput!]): [User!]!
}

input QueryUsersOrderByInput {
  education: EducationOrderByRelationAggregateInput
  project: ProjectOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

type User {
  backEndSkills: [String!]!
  born: String!
  education: [Education]!
  email: String!
  englishSkill: String!
  frontEndSkills: [String!]!
  github: String!
  id: String!
  index: Int!
  infrastructures: [String!]!
  name: String!
  objective: String!
  phone: String!
  project: [Project]!
  strength: String!
  tagline: String!
  website: String!
}

input UserWhereUniqueInput {
  id: String
}