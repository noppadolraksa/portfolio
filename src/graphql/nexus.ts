/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Education: { // root type
    date?: string | null; // String
    degree?: string | null; // String
    fieldOfStudy?: string | null; // String
    id?: string | null; // ID
    index?: number | null; // Int
    institution?: string | null; // String
    userId?: string | null; // String
  }
  Project: { // root type
    description?: string | null; // String
    finished?: boolean | null; // Boolean
    id?: string | null; // ID
    index?: number | null; // Int
    link1?: string | null; // String
    link2?: string | null; // String
    link3?: string | null; // String
    sourceCode?: string | null; // String
    techniques?: Array<string | null> | null; // [String]
    technologies?: Array<string | null> | null; // [String]
    title?: string | null; // String
    userId?: string | null; // String
  }
  Query: {};
  Skill: { // root type
    id?: string | null; // ID
    listening?: number | null; // Int
    personalities?: Array<string | null> | null; // [String]
    reading?: number | null; // Int
    speaking?: number | null; // Int
    userId?: string | null; // String
    writing?: number | null; // Int
  }
  User: { // root type
    backEndSkills?: Array<string | null> | null; // [String]
    born?: string | null; // String
    email?: string | null; // String
    englishSkill?: string | null; // String
    frontEndSkills?: Array<string | null> | null; // [String]
    github?: string | null; // String
    id?: string | null; // ID
    image?: string | null; // String
    index?: number | null; // Int
    infrastructures?: Array<string | null> | null; // [String]
    location?: string | null; // String
    name?: string | null; // String
    objective?: string | null; // String
    phone?: string | null; // String
    strength?: string | null; // String
    tagline?: string | null; // String
    website?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Education: { // field return type
    date: string | null; // String
    degree: string | null; // String
    fieldOfStudy: string | null; // String
    id: string | null; // ID
    index: number | null; // Int
    institution: string | null; // String
    userId: string | null; // String
  }
  Project: { // field return type
    description: string | null; // String
    finished: boolean | null; // Boolean
    id: string | null; // ID
    index: number | null; // Int
    link1: string | null; // String
    link2: string | null; // String
    link3: string | null; // String
    sourceCode: string | null; // String
    techniques: Array<string | null> | null; // [String]
    technologies: Array<string | null> | null; // [String]
    title: string | null; // String
    userId: string | null; // String
  }
  Query: { // field return type
    user: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  Skill: { // field return type
    id: string | null; // ID
    listening: number | null; // Int
    personalities: Array<string | null> | null; // [String]
    reading: number | null; // Int
    speaking: number | null; // Int
    userId: string | null; // String
    writing: number | null; // Int
  }
  User: { // field return type
    backEndSkills: Array<string | null> | null; // [String]
    born: string | null; // String
    education: Array<NexusGenRootTypes['Education'] | null>; // [Education]!
    email: string | null; // String
    englishSkill: string | null; // String
    frontEndSkills: Array<string | null> | null; // [String]
    github: string | null; // String
    id: string | null; // ID
    image: string | null; // String
    index: number | null; // Int
    infrastructures: Array<string | null> | null; // [String]
    location: string | null; // String
    name: string | null; // String
    objective: string | null; // String
    phone: string | null; // String
    project: Array<NexusGenRootTypes['Project'] | null>; // [Project]!
    skill: NexusGenRootTypes['Skill'] | null; // Skill
    strength: string | null; // String
    tagline: string | null; // String
    website: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Education: { // field return type name
    date: 'String'
    degree: 'String'
    fieldOfStudy: 'String'
    id: 'ID'
    index: 'Int'
    institution: 'String'
    userId: 'String'
  }
  Project: { // field return type name
    description: 'String'
    finished: 'Boolean'
    id: 'ID'
    index: 'Int'
    link1: 'String'
    link2: 'String'
    link3: 'String'
    sourceCode: 'String'
    techniques: 'String'
    technologies: 'String'
    title: 'String'
    userId: 'String'
  }
  Query: { // field return type name
    user: 'User'
  }
  Skill: { // field return type name
    id: 'ID'
    listening: 'Int'
    personalities: 'String'
    reading: 'Int'
    speaking: 'Int'
    userId: 'String'
    writing: 'Int'
  }
  User: { // field return type name
    backEndSkills: 'String'
    born: 'String'
    education: 'Education'
    email: 'String'
    englishSkill: 'String'
    frontEndSkills: 'String'
    github: 'String'
    id: 'ID'
    image: 'String'
    index: 'Int'
    infrastructures: 'String'
    location: 'String'
    name: 'String'
    objective: 'String'
    phone: 'String'
    project: 'Project'
    skill: 'Skill'
    strength: 'String'
    tagline: 'String'
    website: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}